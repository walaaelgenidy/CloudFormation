Description: >
    Walaa Elgenidy / Udacity 2020 - IAC-project
Parameters:

    EnvironmentName:
        Description: An environment name that will be prefixed to resource names
        Type: String

    AMItoUse:
      Description: AMI to use for our base image
      Type: String  

    VPC:
      Description: VPC used to deploy our resources below
      Type: AWS::EC2::VPC::Id

    PrivateSubnet1:
      Description: Subnet to be used for our Web Server
      Type: AWS::EC2::Subnet::Id  

    PrivateSubnet2:
      Description: Subnet to be used for our Web Server
      Type: AWS::EC2::Subnet::Id        
    
    PublicSubnet1:
      Description: Subnet to be used for our Web Server
      Type: AWS::EC2::Subnet::Id  

    PublicSubnet2:
      Description: Subnet to be used for our Web Server
      Type: AWS::EC2::Subnet::Id        

Resources:
      UdacityS3ReadOnlyEC2: 
        Type: "AWS::IAM::Role"
        Properties:
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
                Action:
                  - 'sts:AssumeRole'
          ManagedPolicyArns:
            - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      #An InstanceProfile will allow passing the IAM role to our server.
      ServerInstanceProfile: 
          Type: AWS::IAM::InstanceProfile
          Properties: 
            Roles: 
              - !Ref UdacityS3ReadOnlyEC2        

      LBSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Allow http to our load balancer at port 80
          VpcId: !Ref VPC
          
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
         
      WebServerSecGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          GroupDescription: Udagram communicates on the default HTTP Port 80
          VpcId: !Ref VPC
          
          SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 0
            ToPort: 65535
            CidrIp: 0.0.0.0/0
      WebAppLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          UserData:
            Fn::Base64: !Sub |
              #!/bin/bash
              apt-get update -y
              apt-get install unzip awscli -y
              apt-get install apache2 -y
              systemctl start apache2.service
              cd /var/www/html
              aws s3 cp s3://udacity-demo-1/udacity.zip .
              unzip -o udacity.zip         
          ImageId: !Ref AMItoUse
          IamInstanceProfile: !Ref ServerInstanceProfile
          SecurityGroups:
          - Ref: WebServerSecGroup
          InstanceType: t2.medium
          BlockDeviceMappings:
          - DeviceName: "/dev/sdk"
            Ebs:
              VolumeSize: '10'
      WebAppGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          VPCZoneIdentifier:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
          LaunchConfigurationName:
            Ref: WebAppLaunchConfig
          MinSize: '4'
          MaxSize: '8'
          TargetGroupARNs:
          - Ref: WebAppTargetGroup
      WebAppLB:
        Type: AWS::ElasticLoadBalancingV2::LoadBalancer
        Properties:
          Subnets:
          - !Ref PublicSubnet1
          - !Ref PublicSubnet2
          SecurityGroups:
          - Ref: LBSecGroup
      Listener:
          Type: AWS::ElasticLoadBalancingV2::Listener
          Properties:
              DefaultActions:
              - Type: forward
                TargetGroupArn:
                  Ref: WebAppTargetGroup
              LoadBalancerArn:
                Ref: WebAppLB
              Port: '80'
              Protocol: HTTP
      ALBListenerRule:
          Type: AWS::ElasticLoadBalancingV2::ListenerRule
          Properties:
            Actions:
            - Type: forward
              TargetGroupArn: !Ref 'WebAppTargetGroup'
            Conditions:
            - Field: path-pattern
              Values: [/]
            ListenerArn: !Ref 'Listener'
            Priority: 1
      WebAppTargetGroup:
        Type: AWS::ElasticLoadBalancingV2::TargetGroup
        Properties:
          HealthCheckIntervalSeconds: 10
          HealthCheckPath: /
          HealthCheckProtocol: HTTP
          HealthCheckTimeoutSeconds: 8
          HealthyThresholdCount: 2
          Port: 80
          Protocol: HTTP
          UnhealthyThresholdCount: 5
          VpcId: !Ref VPC
Outputs:
  DNS:
    Description: Load balancer public
    Value: serve-WebAp-1DASC6KYIPNSJ-1601055235.us-east-2.elb.amazonaws.com
      